{"version":3,"sources":["webpack:///./game-server/fsg.js","webpack:///./game-server/game.js","webpack:///./game-server/index.js"],"names":["this","actions","JSON","parse","stringify","globals","e","error","originalGame","game","nextGame","currentAction","isNewGame","markedForDelete","defaultSeconds","kickedPlayers","Object","keys","rules","length","timer","state","players","prev","next","events","type","cb","i","id","player","name","kick","finish","killGame","msg","log","push","database","key","value","userid","rule","obj","seconds","set","Math","min","max","action","timeleft","defaultGame","cells","startPlayer","bestOf","maxPlayers","fsg","setGame","checkNewRound","playerLeave","user","playerCount","newRound","otherPlayerId","selectNextPlayer","otherPlayer","setWinner","cellid","payload","cell","event","checkWinner","setTimelimit","playerList","floor","random","remaining","filter","x","check","checkNoneEmpty","filtered","v","setTie","strip","first","clearEvents","findPlayerWithType","pick","on","submit"],"mappings":"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","file":"server.bundle.js","sourcesContent":["\r\nclass FSG {\r\n    constructor() {\r\n        try {\r\n            this.actions = JSON.parse(JSON.stringify(globals.actions()));\r\n        }\r\n        catch (e) { this.error('Failed to load actions'); return }\r\n        try {\r\n            this.originalGame = JSON.parse(JSON.stringify(globals.game()));\r\n        }\r\n        catch (e) { this.error('Failed to load originalGame'); return }\r\n        try {\r\n            this.nextGame = JSON.parse(JSON.stringify(globals.game()));\r\n        }\r\n        catch (e) { this.error('Failed to load nextGame'); return }\r\n\r\n\r\n        this.currentAction = null;\r\n\r\n        this.isNewGame = false;\r\n        this.markedForDelete = false;\r\n        this.defaultSeconds = 15;\r\n        // this.nextTimeLimit = -1;\r\n        this.kickedPlayers = [];\r\n\r\n        if (!this.nextGame || Object.keys(this.nextGame.rules).length == 0) {\r\n            this.isNewGame = true;\r\n            this.error('Missing Rules');\r\n        }\r\n\r\n        if (this.nextGame) {\r\n            if (!('timer' in this.nextGame)) {\r\n                this.nextGame.timer = {};\r\n            }\r\n            if (!('state' in this.nextGame)) {\r\n                this.nextGame.state = {};\r\n            }\r\n\r\n            if (!('players' in this.nextGame)) {\r\n                this.nextGame.players = {};\r\n            }\r\n\r\n            //if (!('prev' in this.nextGame)) {\r\n            this.nextGame.prev = {};\r\n            //}\r\n\r\n            if (!('next' in this.nextGame)) {\r\n                this.nextGame.next = {};\r\n            }\r\n\r\n            if (!('rules' in this.nextGame)) {\r\n                this.nextGame.rules = {};\r\n            }\r\n\r\n            //if (!('events' in this.nextGame)) {\r\n            this.nextGame.events = [];\r\n            //}\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    on(type, cb) {\r\n\r\n        if (type == 'newgame') {\r\n            if (this.isNewGame) {\r\n                this.currentAction = this.actions[0];\r\n                cb(this.actions[0]);\r\n                this.isNewGame = false;\r\n            }\r\n\r\n            return;\r\n            //return;\r\n            // this.nextGame = Object.assign({}, defaultGame, { players: this.nextGame.players })\r\n        }\r\n\r\n        for (var i = 0; i < this.actions.length; i++) {\r\n            if (this.actions[i].type == type) {\r\n                this.currentAction = this.actions[i];\r\n                cb(this.currentAction);\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    setGame(game) {\r\n        for (var id in this.nextGame.players) {\r\n            let player = this.nextGame.players[id];\r\n            game.players[id] = { name: player.name }\r\n        }\r\n        //game.players = Object.assign({}, game.players, this.nextGame.players)\r\n        this.nextGame = game;\r\n    }\r\n\r\n    submit() {\r\n        // if (this.nextGame.timer && this.nextTimeLimit > -1) {\r\n        //     this.nextGame.timer.timelimit = this.nextTimeLimit;\r\n        //     // if (this.markedForDelete)\r\n        //     //     delete this.nextGame.next['timelimit'];\r\n        // }\r\n\r\n        //if next info has been updated, we force a new timer\r\n        // let prevNextUser = JSON.stringify(this.originalGame.next);\r\n        // let curNextUser = JSON.stringify(this.nextGame.next);\r\n        // if (prevNextUser != curNextUser && typeof this.nextGame.timer.set == 'undefined') {\r\n        //     this.setTimelimit()\r\n        // }\r\n\r\n        if (this.kickedPlayers.length > 0)\r\n            this.nextGame.kick = this.kickedPlayers;\r\n\r\n        globals.finish(this.nextGame);\r\n    }\r\n\r\n    killGame() {\r\n        this.markedForDelete = true;\r\n        globals.killGame();\r\n    }\r\n\r\n    log(msg) {\r\n        globals.log(msg);\r\n    }\r\n    error(msg) {\r\n        globals.error(msg);\r\n    }\r\n\r\n    kickPlayer(id) {\r\n        this.kickedPlayers.push(id);\r\n    }\r\n\r\n    database() {\r\n        return globals.database();\r\n    }\r\n\r\n    action() {\r\n        return this.currentAction;\r\n    }\r\n\r\n    state(key, value) {\r\n\r\n        if (typeof key === 'undefined')\r\n            return this.nextGame.state;\r\n        if (typeof value === 'undefined')\r\n            return this.nextGame.state[key];\r\n\r\n        this.nextGame.state[key] = value;\r\n    }\r\n\r\n    playerList() {\r\n        return Object.keys(this.nextGame.players);\r\n    }\r\n    playerCount() {\r\n        return Object.keys(this.nextGame.players).length;\r\n    }\r\n\r\n    players(userid, value) {\r\n        if (typeof userid === 'undefined')\r\n            return this.nextGame.players;\r\n        if (typeof value === 'undefined')\r\n            return this.nextGame.players[userid];\r\n\r\n        this.nextGame.players[userid] = value;\r\n    }\r\n\r\n    rules(rule, value) {\r\n        if (typeof rule === 'undefined')\r\n            return this.nextGame.rules;\r\n        if (typeof value === 'undefined')\r\n            return this.nextGame.rules[rule];\r\n\r\n        this.nextGame.rules[rule] = value;\r\n    }\r\n\r\n    prev(obj) {\r\n        if (typeof obj === 'object') {\r\n            this.nextGame.prev = obj;\r\n        }\r\n        return this.nextGame.prev;\r\n    }\r\n\r\n    next(obj) {\r\n        if (typeof obj === 'object') {\r\n            this.nextGame.next = obj;\r\n        }\r\n        return this.nextGame.next;\r\n    }\r\n\r\n    setTimelimit(seconds) {\r\n        seconds = seconds || this.defaultSeconds;\r\n        if (!this.nextGame.timer)\r\n            this.nextGame.timer = {};\r\n        this.nextGame.timer.set = Math.min(60, Math.max(10, seconds));\r\n    }\r\n\r\n    reachedTimelimit(action) {\r\n        if (typeof action.timeleft == 'undefined')\r\n            return false;\r\n        return action.timeleft <= 0;\r\n    }\r\n\r\n    event(name) {\r\n        this.nextGame.events.push(name);\r\n    }\r\n\r\n    clearEvents() {\r\n        this.nextGame.events = [];\r\n    }\r\n    events(name) {\r\n        if (typeof name === 'undefined')\r\n            return this.nextGame.events;\r\n        this.nextGame.events.push(name);\r\n    }\r\n}\r\n\r\nexport default new FSG();","import fsg from './fsg';\r\n\r\nlet defaultGame = {\r\n    state: {\r\n        cells: ['', '', '', '', '', '', '', '', ''],\r\n        startPlayer: ''\r\n    },\r\n    players: {},\r\n    rules: {\r\n        bestOf: 5,\r\n        maxPlayers: 2\r\n    },\r\n    next: {},\r\n    events: []\r\n}\r\n\r\nclass Tictactoe {\r\n\r\n    onNewGame(action) {\r\n        fsg.setGame(defaultGame);\r\n        this.checkNewRound();\r\n    }\r\n\r\n    onSkip(action) {\r\n        let next = fsg.next();\r\n        if (!next || !next.id)\r\n            return;\r\n        // let id = action.payload.id;\r\n        // if (!next.id) {\r\n        //     id = next.id;\r\n        // }\r\n\r\n        this.playerLeave(next.id);\r\n    }\r\n\r\n    onJoin(action) {\r\n        fsg.log(action);\r\n        if (!action.user.id)\r\n            return;\r\n\r\n        // if (fsg.players(action.user.id).type)\r\n        //     return;\r\n\r\n        this.checkNewRound();\r\n    }\r\n\r\n    checkNewRound() {\r\n        //if player count reached required limit, start the game\r\n        let maxPlayers = fsg.rules('maxPlayers') || 2;\r\n        let playerCount = fsg.playerCount();\r\n        if (playerCount >= maxPlayers) {\r\n            this.newRound();\r\n        }\r\n    }\r\n\r\n    onLeave(action) {\r\n        this.playerLeave(action.user.id);\r\n    }\r\n\r\n    playerLeave(id) {\r\n        let players = fsg.players();\r\n        let otherPlayerId = null;\r\n        if (players[id]) {\r\n            otherPlayerId = this.selectNextPlayer(id);\r\n            delete players[id];\r\n        }\r\n\r\n        if (otherPlayerId) {\r\n            let otherPlayer = players[otherPlayerId];\r\n            this.setWinner(otherPlayer.type, 'forfeit')\r\n        }\r\n    }\r\n\r\n    onPick(action) {\r\n        let state = fsg.state();\r\n        let user = fsg.players(action.user.id);\r\n\r\n        //get the picked cell\r\n        let cellid = action.payload.cell;\r\n        let cell = state.cells[cellid];\r\n\r\n        // block picking cells with markings, and send error\r\n        if (cell.length > 0) {\r\n            fsg.next({\r\n                id: action.user.id,\r\n                action: 'pick',\r\n                error: 'NOT_EMPTY'\r\n            })\r\n            return;\r\n        }\r\n\r\n        //mark the selected cell\r\n        let type = user.type;\r\n        let id = action.user.id;\r\n        state.cells[cellid] = type;\r\n\r\n        fsg.event('picked');\r\n        fsg.prev({\r\n            cellid, id\r\n        })\r\n\r\n        if (this.checkWinner()) {\r\n            return;\r\n        }\r\n\r\n        fsg.setTimelimit(20);\r\n        this.selectNextPlayer(null);\r\n    }\r\n\r\n    newRound() {\r\n        let playerList = fsg.playerList();\r\n\r\n        let state = fsg.state();\r\n        //select the starting player\r\n        if (!state.startPlayer || state.startPlayer.length == 0) {\r\n            state.startPlayer = this.selectNextPlayer(playerList[Math.floor(Math.random() * playerList.length)]);\r\n        }\r\n        else {\r\n            state.startPlayer = this.selectNextPlayer(state.startPlayer);\r\n        }\r\n\r\n        //set the starting player, and set type for other player\r\n        let players = fsg.players();\r\n        for (var id in players)\r\n            players[id].type = 'O';\r\n        players[state.startPlayer].type = 'X';\r\n    }\r\n\r\n    selectNextPlayer(userid) {\r\n        let action = fsg.action();\r\n        let players = fsg.playerList();\r\n        userid = userid || action.user.id;\r\n        //only 2 players so just filter the current player\r\n        let remaining = players.filter(x => x != userid);\r\n        fsg.next({\r\n            id: remaining[0],\r\n            action: 'pick'\r\n        });\r\n        return remaining[0];\r\n    }\r\n\r\n\r\n    // Check each strip that makes a win\r\n    //      0  |  1  |  2\r\n    //    -----------------\r\n    //      3  |  4  |  5\r\n    //    -----------------\r\n    //      6  |  7  |  8\r\n    checkWinner() {\r\n        if (this.check([0, 1, 2])) return true;\r\n        if (this.check([3, 4, 5])) return true;\r\n        if (this.check([6, 7, 8])) return true;\r\n        if (this.check([0, 3, 6])) return true;\r\n        if (this.check([1, 4, 7])) return true;\r\n        if (this.check([2, 5, 8])) return true;\r\n        if (this.check([0, 4, 8])) return true;\r\n        if (this.check([6, 4, 2])) return true;\r\n        if (this.checkNoneEmpty()) return true;\r\n        return false;\r\n    }\r\n\r\n    checkNoneEmpty() {\r\n        let cells = fsg.state().cells;\r\n        let filtered = cells.filter(v => v == '');\r\n\r\n        if (filtered.length == 0) {\r\n            this.setTie();\r\n        }\r\n        return filtered.length == 0;\r\n    }\r\n\r\n    // checks if a strip has matching types\r\n    check(strip) {\r\n        let cells = fsg.state().cells;\r\n        let first = cells[strip[0]];\r\n        if (first == '')\r\n            return false;\r\n        let filtered = strip.filter(id => cells[id] == first);\r\n        if (filtered.length == 3 && filtered.length == strip.length) {\r\n            this.setWinner(first, strip);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    findPlayerWithType(type) {\r\n        let players = fsg.players();\r\n        for (var id in players) {\r\n            let player = players[id];\r\n            if (player.type == type)\r\n                return id;\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n    setTie() {\r\n        fsg.clearEvents();\r\n        fsg.event('tie')\r\n        fsg.next({});\r\n        fsg.prev({})\r\n\r\n        fsg.killGame();\r\n    }\r\n    // set the winner event and data\r\n    setWinner(type, strip) {\r\n        //find user who matches the win type\r\n        let userid = this.findPlayerWithType(type);\r\n        let player = fsg.players(userid);\r\n        if (!player) {\r\n            player.id = 'unknown player';\r\n        }\r\n        fsg.clearEvents();\r\n        fsg.event('winner')\r\n        fsg.prev({\r\n            pick: type,\r\n            strip: strip,\r\n            id: userid\r\n        })\r\n        fsg.next({});\r\n\r\n        fsg.killGame();\r\n    }\r\n}\r\n\r\nexport default new Tictactoe();","import fsg from './fsg';\r\nimport tictactoe from './game';\r\n\r\n\r\n\r\nfsg.on('newgame', (action) => tictactoe.onNewGame(action));\r\nfsg.on('skip', (action) => tictactoe.onSkip(action));\r\nfsg.on('join', (action) => tictactoe.onJoin(action));\r\nfsg.on('leave', (action) => tictactoe.onLeave(action));\r\nfsg.on('pick', (action) => tictactoe.onPick(action));\r\n\r\nfsg.submit();"],"sourceRoot":""}