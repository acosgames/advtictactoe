{"version":3,"sources":["webpack:///./game-server/fsg.js","webpack:///./game-server/game.js","webpack:///./game-server/index.js"],"names":["this","msg","JSON","parse","stringify","globals","action","originalGame","game","nextGame","isNewGame","markedForDelete","Object","keys","rules","length","error","state","players","prev","next","events","type","cb","defaultGame","assign","finish","killGame","log","key","value","userid","rule","obj","name","push","cells","startPlayer","bestOf","maxPlayers","fsg","user","id","playerCount","newRound","otherPlayerId","selectNextPlayer","otherPlayer","setWinner","cellid","payload","cell","event","checkWinner","playerList","Math","floor","random","remaining","filter","x","check","checkNoneEmpty","filtered","v","setTie","strip","first","clearEvents","findPlayerWithType","player","pick","on","submit"],"mappings":"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","file":"server.bundle.js","sourcesContent":["\r\nclass FSG {\r\n    constructor() {\r\n        this.msg = JSON.parse(JSON.stringify(globals.action()));\r\n        this.originalGame = JSON.parse(JSON.stringify(globals.game()));\r\n        this.nextGame = JSON.parse(JSON.stringify(globals.game()));\r\n        this.isNewGame = false;\r\n        this.markedForDelete = false;\r\n\r\n        if (!this.nextGame || Object.keys(this.nextGame.rules).length == 0) {\r\n            this.isNewGame = true;\r\n            this.error('Missing Rules');\r\n        }\r\n\r\n        if (this.nextGame) {\r\n            if (!('state' in this.nextGame)) {\r\n                this.nextGame.state = {};\r\n            }\r\n            if (!('players' in this.nextGame)) {\r\n                this.nextGame.players = {};\r\n            }\r\n\r\n            //if (!('prev' in this.nextGame)) {\r\n            this.nextGame.prev = {};\r\n            //}\r\n\r\n            if (!('next' in this.nextGame)) {\r\n                this.nextGame.next = {};\r\n            }\r\n\r\n            if (!('rules' in this.nextGame)) {\r\n                this.nextGame.rules = {};\r\n            }\r\n\r\n            //if (!('events' in this.nextGame)) {\r\n            this.nextGame.events = [];\r\n            //}\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    on(type, cb) {\r\n        if (this.msg.type != type) {\r\n            if (type == 'newgame' && this.isNewGame) {\r\n                let defaultGame = cb(this.msg);\r\n                this.nextGame = Object.assign({}, defaultGame, { players: this.nextGame.players })\r\n            }\r\n            return;\r\n        }\r\n\r\n        cb(this.msg);\r\n    }\r\n\r\n    submit() {\r\n        globals.finish(this.nextGame);\r\n    }\r\n\r\n    killGame() {\r\n        this.markedForDelete = true;\r\n        globals.killGame();\r\n    }\r\n\r\n    log(msg) {\r\n        globals.log(msg);\r\n    }\r\n    error(msg) {\r\n        globals.error(msg);\r\n    }\r\n\r\n    action() {\r\n        return this.msg;\r\n    }\r\n\r\n    state(key, value) {\r\n\r\n        if (typeof key === 'undefined')\r\n            return this.nextGame.state;\r\n        if (typeof value === 'undefined')\r\n            return this.nextGame.state[key];\r\n\r\n        this.nextGame.state[key] = value;\r\n    }\r\n\r\n    playerList() {\r\n        return Object.keys(this.nextGame.players);\r\n    }\r\n    playerCount() {\r\n        return Object.keys(this.nextGame.players).length;\r\n    }\r\n\r\n    players(userid, value) {\r\n        if (typeof userid === 'undefined')\r\n            return this.nextGame.players;\r\n        if (typeof value === 'undefined')\r\n            return this.nextGame.players[userid];\r\n\r\n        this.nextGame.players[userid] = value;\r\n    }\r\n\r\n    rules(rule, value) {\r\n        if (typeof rule === 'undefined')\r\n            return this.nextGame.rules;\r\n        if (typeof value === 'undefined')\r\n            return this.nextGame.rules[rule];\r\n\r\n        this.nextGame.rules[rule] = value;\r\n    }\r\n\r\n    prev(obj) {\r\n        if (typeof obj === 'object') {\r\n            this.nextGame.prev = obj;\r\n        }\r\n        return this.nextGame.prev;\r\n    }\r\n\r\n    next(obj) {\r\n        if (typeof obj === 'object') {\r\n            this.nextGame.next = obj;\r\n        }\r\n        return this.nextGame.next;\r\n    }\r\n\r\n    event(name) {\r\n        this.nextGame.events.push(name);\r\n    }\r\n\r\n    clearEvents() {\r\n        this.nextGame.events = [];\r\n    }\r\n    events(name) {\r\n        if (typeof name === 'undefined')\r\n            return this.nextGame.events;\r\n        this.nextGame.events.push(name);\r\n    }\r\n}\r\n\r\nexport default new FSG();","import fsg from './fsg';\r\n\r\nlet defaultGame = {\r\n    state: {\r\n        cells: ['', '', '', '', '', '', '', '', ''],\r\n        startPlayer: ''\r\n    },\r\n    players: {},\r\n    rules: {\r\n        bestOf: 5,\r\n        maxPlayers: 2\r\n    },\r\n    next: {},\r\n    events: []\r\n}\r\n\r\nclass Tictactoe {\r\n\r\n    onNewGame() {\r\n        return defaultGame\r\n    }\r\n\r\n    onJoin() {\r\n        let action = fsg.action();\r\n        if (!action.user.id)\r\n            return;\r\n\r\n        if (fsg.players(action.user.id).type)\r\n            return;\r\n        //if player count reached required limit, start the game\r\n        let maxPlayers = fsg.rules('maxPlayers') || 2;\r\n        let playerCount = fsg.playerCount();\r\n        if (playerCount >= maxPlayers) {\r\n            this.newRound();\r\n        }\r\n    }\r\n\r\n    onLeave() {\r\n        let players = fsg.players();\r\n        let action = fsg.action();\r\n\r\n        let otherPlayerId = null;\r\n        if (players[action.user.id]) {\r\n            otherPlayerId = this.selectNextPlayer(action.user.id);\r\n            delete players[action.user.id];\r\n        }\r\n\r\n        if (otherPlayerId) {\r\n            let otherPlayer = players[otherPlayerId];\r\n            this.setWinner(otherPlayer.type, 'forfeit')\r\n        }\r\n    }\r\n\r\n    onPick() {\r\n        let state = fsg.state();\r\n        let action = fsg.action();\r\n        let user = fsg.players(action.user.id);\r\n\r\n        //get the picked cell\r\n        let cellid = action.payload.cell;\r\n        let cell = state.cells[cellid];\r\n\r\n        // block picking cells with markings, and send error\r\n        if (cell.length > 0) {\r\n            fsg.next({\r\n                id: action.user.id,\r\n                action: 'pick',\r\n                error: 'NOT_EMPTY'\r\n            })\r\n            return;\r\n        }\r\n\r\n        //mark the selected cell\r\n        let type = user.type;\r\n        let id = action.user.id;\r\n        state.cells[cellid] = type;\r\n\r\n        fsg.event('picked');\r\n        fsg.prev({\r\n            cellid, id\r\n        })\r\n\r\n        if (this.checkWinner()) {\r\n            return;\r\n        }\r\n\r\n        this.selectNextPlayer();\r\n    }\r\n\r\n    newRound() {\r\n        let playerList = fsg.playerList();\r\n\r\n        let state = fsg.state();\r\n        //select the starting player\r\n        if (!state.startPlayer || state.startPlayer.length == 0) {\r\n            state.startPlayer = this.selectNextPlayer(playerList[Math.floor(Math.random() * playerList.length)]);\r\n        }\r\n        else {\r\n            state.startPlayer = this.selectNextPlayer(state.startPlayer);\r\n        }\r\n\r\n        //set the starting player, and set type for other player\r\n        let players = fsg.players();\r\n        for (var id in players)\r\n            players[id].type = 'O';\r\n        players[state.startPlayer].type = 'X';\r\n    }\r\n\r\n    selectNextPlayer(userid) {\r\n        let action = fsg.action();\r\n        let players = fsg.playerList();\r\n        userid = userid || action.user.id;\r\n        //only 2 players so just filter the current player\r\n        let remaining = players.filter(x => x != userid);\r\n        fsg.next({\r\n            id: remaining[0],\r\n            action: 'pick'\r\n        });\r\n        return remaining[0];\r\n    }\r\n\r\n\r\n    // Check each strip that makes a win\r\n    //      0  |  1  |  2\r\n    //    -----------------\r\n    //      3  |  4  |  5\r\n    //    -----------------\r\n    //      6  |  7  |  8\r\n    checkWinner() {\r\n        if (this.check([0, 1, 2])) return true;\r\n        if (this.check([3, 4, 5])) return true;\r\n        if (this.check([6, 7, 8])) return true;\r\n        if (this.check([0, 3, 6])) return true;\r\n        if (this.check([1, 4, 7])) return true;\r\n        if (this.check([2, 5, 8])) return true;\r\n        if (this.check([0, 4, 8])) return true;\r\n        if (this.check([6, 4, 2])) return true;\r\n        if (this.checkNoneEmpty()) return true;\r\n        return false;\r\n    }\r\n\r\n    checkNoneEmpty() {\r\n        let cells = fsg.state().cells;\r\n        let filtered = cells.filter(v => v == '');\r\n\r\n        if (filtered.length == 0) {\r\n            this.setTie();\r\n        }\r\n        return filtered.length == 0;\r\n    }\r\n\r\n    // checks if a strip has matching types\r\n    check(strip) {\r\n        let cells = fsg.state().cells;\r\n        let first = cells[strip[0]];\r\n        if (first == '')\r\n            return false;\r\n        let filtered = strip.filter(id => cells[id] == first);\r\n        if (filtered.length == 3 && filtered.length == strip.length) {\r\n            this.setWinner(first, strip);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    findPlayerWithType(type) {\r\n        let players = fsg.players();\r\n        for (var id in players) {\r\n            let player = players[id];\r\n            if (player.type == type)\r\n                return id;\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n    setTie() {\r\n        fsg.clearEvents();\r\n        fsg.event('tie')\r\n        fsg.next({});\r\n        fsg.prev({})\r\n\r\n        fsg.killGame();\r\n    }\r\n    // set the winner event and data\r\n    setWinner(type, strip) {\r\n        //find user who matches the win type\r\n        let userid = this.findPlayerWithType(type);\r\n        let player = fsg.players(userid);\r\n        if (!player) {\r\n            player.id = 'unknown player';\r\n        }\r\n        fsg.clearEvents();\r\n        fsg.event('winner')\r\n        fsg.prev({\r\n            pick: type,\r\n            strip: strip,\r\n            id: userid\r\n        })\r\n        fsg.next({});\r\n\r\n        // fsg.killGame();\r\n    }\r\n}\r\n\r\nexport default new Tictactoe();","import fsg from './fsg';\r\nimport tictactoe from './game';\r\n\r\nfsg.on('newgame', () => tictactoe.onNewGame());\r\nfsg.on('join', () => tictactoe.onJoin());\r\nfsg.on('leave', () => tictactoe.onLeave());\r\nfsg.on('pick', () => tictactoe.onPick());\r\n\r\nfsg.submit();"],"sourceRoot":""}