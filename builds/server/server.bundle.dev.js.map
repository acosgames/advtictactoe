{"version":3,"file":"server.bundle.dev.js","mappings":";;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,sCAAsC;AAC1D;AACA;AACA;AACA,oBAAoB,2CAA2C;AAC/D;AACA;AACA;AACA,oBAAoB,uCAAuC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,yBAAyB;AACjiEAAe,WAAW;;;;;;;;;;;;;;AC5NA;AAC1B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL,eAAe;AACf,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,8CAAG;AACX;AACA;AACA;AACA;AACA,mBAAmB,8CAAG;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,8CAAG;AACX;AACA;AACA;AACA,qBAAqB,8CAAG;AACxB;AACA;AACA;AACA,0BAA0B,8CAAG;AAC7B;AACA,YAAY,8CAAG;AACf;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,8CAAG;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,8CAAG;AAC5B;AACA,oBAAoB,8CAAG;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8CAAG;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,8CAAG;AACX,QAAQ,8CAAG;AACX;AACA;AACA;AACA,qBAAqB,8CAAG;AACxB,sBAAsB,8CAAG;AACzB;AACA;AACA;AACA,QAAQ,8CAAG;AACX;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8CAAG;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,8CAAG;AACvB,qBAAqB,8CAAG;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,yBAAyB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,8CAAG;AACX;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,8CAAG;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,8CAAG;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,8CAAG;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8CAAG;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,8CAAG,YAAY,aAAa;AACpC,QAAQ,8CAAG,QAAQ;AACnB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,8CAAG;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,8CAAG;AACX;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,QAAQ,8CAAG,QAAQ;AACnB;AACA;AACA;AACA;AACA,iEAAe,eAAe;;;;;;UC3R9B;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;;;;;;;;ACA0B;AACK;AAC/B;AACA;AACA,8CAAG,6BAA6B,6CAAS;AACzC,8CAAG,wBAAwB,6CAAS;AACpC,8CAAG,wBAAwB,6CAAS;AACpC,8CAAG,yBAAyB,6CAAS;AACrC,8CAAG,wBAAwB,6CAAS;AACpC;AACA,8CAAG,U","sources":["file:///E:\\GitHub\\acos-games\\advtictactoe\\game-server\\acosg.js","file:///E:\\GitHub\\acos-games\\advtictactoe\\game-server\\game.js","file:///webpack/bootstrap","file:///webpack/runtime/define property getters","file:///webpack/runtime/hasOwnProperty shorthand","file:///E:\\GitHub\\acos-games\\advtictactoe\\game-server\\index.js"],"sourcesContent":["const globals = {\r\n    log,\r\n    error,\r\n    finish,\r\n    random,\r\n    game,\r\n    actions,\r\n    killGame,\r\n    database,\r\n    ignore\r\n}\r\n\r\nclass ACOSG {\r\n    constructor() {\r\n        try {\r\n            this.actions = JSON.parse(JSON.stringify(globals.actions()));\r\n        }\r\n        catch (e) { this.error('Failed to load actions'); return }\r\n        try {\r\n            this.originalGame = JSON.parse(JSON.stringify(globals.game()));\r\n        }\r\n        catch (e) { this.error('Failed to load originalGame'); return }\r\n        try {\r\n            this.nextGame = JSON.parse(JSON.stringify(globals.game()));\r\n        }\r\n        catch (e) { this.error('Failed to load nextGame'); return }\r\n\r\n\r\n        this.currentAction = null;\r\n\r\n        this.isNewGame = false;\r\n        // this.markedForDelete = false;\r\n        this.defaultSeconds = 15;\r\n        // this.nextTimeLimit = -1;\r\n        this.kickedPlayers = [];\r\n\r\n        // if (!this.nextGame || !this.nextGame.rules || Object.keys(this.nextGame.rules).length == 0) {\r\n        //     this.isNewGame = true;\r\n        //     this.error('Missing Rules');\r\n        // }\r\n\r\n        if (this.nextGame) {\r\n            if (!('timer' in this.nextGame)) {\r\n                this.nextGame.timer = {};\r\n            }\r\n            if (!('state' in this.nextGame)) {\r\n                this.nextGame.state = {};\r\n            }\r\n\r\n            if (!('players' in this.nextGame)) {\r\n                this.nextGame.players = {};\r\n            }\r\n\r\n            //if (!('prev' in this.nextGame)) {\r\n            this.nextGame.prev = {};\r\n            //}\r\n\r\n            if (!('next' in this.nextGame)) {\r\n                this.nextGame.next = {};\r\n            }\r\n\r\n            if (!('rules' in this.nextGame)) {\r\n                this.nextGame.rules = {};\r\n            }\r\n\r\n            this.nextGame.events = {};\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    on(type, cb) {\r\n\r\n        // if (type == 'newgame') {\r\n        //     //if (this.isNewGame) {\r\n        //     this.currentAction = this.actions[0];\r\n        //     if (this.currentAction.type == '')\r\n        //         cb(this.actions[0]);\r\n        //     this.isNewGame = false;\r\n        //     //}\r\n\r\n        //     return;\r\n        // }\r\n\r\n        for (var i = 0; i < this.actions.length; i++) {\r\n            if (this.actions[i].type == type) {\r\n                this.currentAction = this.actions[i];\r\n                let result = cb(this.currentAction);\r\n                if (typeof result == \"boolean\" && !result) {\r\n                    this.ignore();\r\n                    break;\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    ignore() {\r\n        globals.ignore();\r\n    }\r\n\r\n    setGame(game) {\r\n        for (var id in this.nextGame.players) {\r\n            let player = this.nextGame.players[id];\r\n            game.players[id] = player;\r\n        }\r\n        this.nextGame = game;\r\n    }\r\n\r\n    submit() {\r\n        if (this.kickedPlayers.length > 0)\r\n            this.nextGame.kick = this.kickedPlayers;\r\n\r\n        globals.finish(this.nextGame);\r\n    }\r\n\r\n    gameover(payload) {\r\n        this.event('gameover', payload);\r\n    }\r\n\r\n    log(msg) {\r\n        globals.log(msg);\r\n    }\r\n    error(msg) {\r\n        globals.error(msg);\r\n    }\r\n\r\n    kickPlayer(id) {\r\n        this.kickedPlayers.push(id);\r\n    }\r\n\r\n    database() {\r\n        return globals.database();\r\n    }\r\n\r\n    action() {\r\n        return this.currentAction;\r\n    }\r\n\r\n    state(key, value) {\r\n\r\n        if (typeof key === 'undefined')\r\n            return this.nextGame.state;\r\n        if (typeof value === 'undefined')\r\n            return this.nextGame.state[key];\r\n\r\n        this.nextGame.state[key] = value;\r\n    }\r\n\r\n    playerList() {\r\n        return Object.keys(this.nextGame.players);\r\n    }\r\n    playerCount() {\r\n        return Object.keys(this.nextGame.players).length;\r\n    }\r\n\r\n    players(userid, value) {\r\n        if (typeof userid === 'undefined')\r\n            return this.nextGame.players;\r\n        if (typeof value === 'undefined')\r\n            return this.nextGame.players[userid];\r\n\r\n        this.nextGame.players[userid] = value;\r\n    }\r\n\r\n    rules(rule, value) {\r\n        if (typeof rule === 'undefined')\r\n            return this.nextGame.rules;\r\n        if (typeof value === 'undefined')\r\n            return this.nextGame.rules[rule];\r\n\r\n        this.nextGame.rules[rule] = value;\r\n    }\r\n\r\n    prev(obj) {\r\n        if (typeof obj === 'object') {\r\n            this.nextGame.prev = obj;\r\n        }\r\n        return this.nextGame.prev;\r\n    }\r\n\r\n    next(obj) {\r\n        if (typeof obj === 'object') {\r\n            this.nextGame.next = obj;\r\n        }\r\n        return this.nextGame.next;\r\n    }\r\n\r\n    setTimelimit(seconds) {\r\n        seconds = seconds || this.defaultSeconds;\r\n        if (!this.nextGame.timer)\r\n            this.nextGame.timer = {};\r\n        this.nextGame.timer.set = seconds;// Math.min(60, Math.max(10, seconds));\r\n    }\r\n\r\n    reachedTimelimit(action) {\r\n        if (typeof action.timeleft == 'undefined')\r\n            return false;\r\n        return action.timeleft <= 0;\r\n    }\r\n\r\n    event(name, payload) {\r\n        if (!payload)\r\n            return this.nextGame.events[name];\r\n\r\n        this.nextGame.events[name] = payload || {};\r\n    }\r\n\r\n    clearEvents() {\r\n        this.nextGame.events = {};\r\n    }\r\n    // events(name) {\r\n    //     if (typeof name === 'undefined')\r\n    //         return this.nextGame.events;\r\n    //     this.nextGame.events.push(name);\r\n    // }\r\n}\r\n\r\nexport default new ACOSG();","import cup from './acosg';\r\n\r\nlet defaultGame = {\r\n    state: {\r\n        cells: {\r\n            0: '', 1: '', 2: '', 3: '', 4: '', 5: '', 6: '', 7: '', 8: ''\r\n        },\r\n        // cells: ['', '', '', '', '', '', '', '', ''],\r\n        //sx: ''\r\n    },\r\n    players: {},\r\n    next: {},\r\n    events: {}\r\n}\r\n\r\nclass Tictactoe {\r\n\r\n    onNewGame(action) {\r\n        cup.setGame(defaultGame);\r\n        this.checkNewRound();\r\n    }\r\n\r\n    onSkip(action) {\r\n        let next = cup.next();\r\n        if (!next || !next.id)\r\n            return;\r\n        // let id = action.payload.id;\r\n        // if (!next.id) {\r\n        //     id = next.id;\r\n        // }\r\n\r\n        this.playerLeave(next.id);\r\n    }\r\n\r\n    onJoin(action) {\r\n        cup.log(action);\r\n        if (!action.user.id)\r\n            return;\r\n\r\n        let player = cup.players(action.user.id);\r\n        player.rank = 2;\r\n        player.score = 0;\r\n\r\n        let playerCount = cup.playerCount();\r\n        if (playerCount <= 2) {\r\n            cup.event('join', {\r\n                id: action.user.id\r\n            });\r\n            // this.checkNewRound();\r\n        }\r\n        else {\r\n\r\n        }\r\n\r\n\r\n        // if (cup.players(action.user.id).type)\r\n        //     return;\r\n\r\n\r\n    }\r\n\r\n    checkNewRound() {\r\n        //if player count reached required limit, start the game\r\n        //let maxPlayers = cup.rules('maxPlayers') || 2;\r\n        let playerCount = cup.playerCount();\r\n        if (playerCount >= 2) {\r\n            this.newRound();\r\n        }\r\n    }\r\n\r\n    newRound() {\r\n        let playerList = cup.playerList();\r\n\r\n        let state = cup.state();\r\n        //select the starting player\r\n        if (!state.sx || state.sx.length == 0) {\r\n            state.sx = this.selectNextPlayer(playerList[Math.floor(Math.random() * playerList.length)]);\r\n        }\r\n        else {\r\n            state.sx = this.selectNextPlayer(state.sx);\r\n        }\r\n\r\n        //set the starting player, and set type for other player\r\n        let players = cup.players();\r\n        for (var id in players) {\r\n            players[id].type = 'R';\r\n            players[id].items = [1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n        }\r\n\r\n        players[state.sx].type = 'B';\r\n\r\n        cup.event('newround', true);\r\n        cup.setTimelimit(25);\r\n    }\r\n\r\n    selectNextPlayer(userid) {\r\n        let action = cup.action();\r\n        let players = cup.playerList();\r\n        userid = userid || action.user.id;\r\n        //only 2 players so just filter the current player\r\n        let remaining = players.filter(x => x != userid);\r\n        cup.next({\r\n            id: remaining[0],\r\n            action: 'pick'\r\n        });\r\n        return remaining[0];\r\n    }\r\n\r\n\r\n    onLeave(action) {\r\n        this.playerLeave(action.user.id);\r\n    }\r\n\r\n    playerLeave(id) {\r\n        let players = cup.players();\r\n        let otherPlayerId = null;\r\n        if (players[id]) {\r\n            otherPlayerId = this.selectNextPlayer(id);\r\n            //delete players[id];\r\n        }\r\n\r\n        if (otherPlayerId) {\r\n            let otherPlayer = players[otherPlayerId];\r\n            this.setWinner(otherPlayer.type, 'forfeit')\r\n        }\r\n    }\r\n\r\n    onPick(action) {\r\n        let state = cup.state();\r\n        let player = cup.players(action.user.id);\r\n\r\n        //get the picked cell\r\n        let cellid = action.payload.cell;\r\n        let size = Number(action.payload.size);\r\n        if (typeof cellid !== 'number' || typeof size !== 'number')\r\n            return false;\r\n\r\n        let cell = state.cells[cellid];\r\n\r\n        // block picking cells with markings, and send error\r\n        if (cell.length > 0) {\r\n\r\n            let owner = cell[0];\r\n            let ownersize = Number(cell[1]);\r\n\r\n            if (owner == player.type || size <= ownersize) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (!player.items.includes(size)) {\r\n            return false;\r\n        }\r\n\r\n        //mark the selected cell\r\n        let type = player.type;\r\n        let id = action.user.id;\r\n        state.cells[cellid] = type + size;\r\n\r\n        let newItems = [];\r\n        for (var i = 0; i < player.items.length; i++) {\r\n            let item = player.items[i];\r\n            if (item != size)\r\n                newItems.push(item);\r\n        }\r\n\r\n        player.items = newItems;\r\n\r\n        cup.event('picked', {\r\n            cell: cellid, id, type, size\r\n        });\r\n        // cup.prev()\r\n\r\n        if (this.checkWinner()) {\r\n            return;\r\n        }\r\n\r\n        cup.setTimelimit(20);\r\n        this.selectNextPlayer(null);\r\n    }\r\n\r\n\r\n\r\n    // Check each strip that makes a win\r\n    //      0  |  1  |  2\r\n    //    -----------------\r\n    //      3  |  4  |  5\r\n    //    -----------------\r\n    //      6  |  7  |  8\r\n    checkWinner() {\r\n        if (this.check([0, 1, 2])) return true;\r\n        if (this.check([3, 4, 5])) return true;\r\n        if (this.check([6, 7, 8])) return true;\r\n        if (this.check([0, 3, 6])) return true;\r\n        if (this.check([1, 4, 7])) return true;\r\n        if (this.check([2, 5, 8])) return true;\r\n        if (this.check([0, 4, 8])) return true;\r\n        if (this.check([6, 4, 2])) return true;\r\n        if (this.checkNoneEmpty()) return true;\r\n        return false;\r\n    }\r\n\r\n    checkNoneEmpty() {\r\n        let cells = cup.state().cells;\r\n        let cellslist = [];\r\n        for (var key in cells) {\r\n            cellslist.push(cells[key]);\r\n        }\r\n        let filtered = cellslist.filter(v => v == '');\r\n\r\n        if (filtered.length == 0) {\r\n            this.setTie();\r\n        }\r\n        return filtered.length == 0;\r\n    }\r\n\r\n    // checks if a strip has matching types\r\n    check(strip) {\r\n        let cells = cup.state().cells;\r\n        let cellslist = [];\r\n        for (var key in cells) {\r\n            cellslist.push(cells[key]);\r\n        }\r\n\r\n\r\n        let first = cellslist[strip[0]];\r\n        if (first == '')\r\n            return false;\r\n        let firstOwner = first[0];\r\n        let filtered = strip.filter(id => {\r\n            let cell = cellslist[id];\r\n            let owner = cell[0];\r\n            return (owner == firstOwner)\r\n        });\r\n\r\n        if (filtered.length == 3 && filtered.length == strip.length) {\r\n            this.setWinner(firstOwner, strip);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    findPlayerWithType(type) {\r\n        let players = cup.players();\r\n        for (var id in players) {\r\n            let player = players[id];\r\n            if (player.type == type)\r\n                return id;\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n    setTie() {\r\n        cup.gameover({ type: 'tie' })\r\n        cup.next({});\r\n        // cup.prev({})\r\n\r\n        // cup.killGame();\r\n    }\r\n    // set the winner event and data\r\n    setWinner(type, strip) {\r\n        //find user who matches the win type\r\n        let userid = this.findPlayerWithType(type);\r\n        let player = cup.players(userid);\r\n        player.rank = 1;\r\n        player.score = player.score + 100;\r\n        if (!player) {\r\n            player.id = 'unknown player';\r\n        }\r\n\r\n        cup.gameover({\r\n            type: 'winner',\r\n            pick: type,\r\n            strip: strip,\r\n            id: userid\r\n        });\r\n        // cup.prev()\r\n        cup.next({});\r\n        // cup.killGame();\r\n    }\r\n}\r\n\r\nexport default new Tictactoe();","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import cup from './acosg';\r\nimport tictactoe from './game';\r\n\r\n\r\ncup.on('gamestart', (action) => tictactoe.onNewGame(action));\r\ncup.on('skip', (action) => tictactoe.onSkip(action));\r\ncup.on('join', (action) => tictactoe.onJoin(action));\r\ncup.on('leave', (action) => tictactoe.onLeave(action));\r\ncup.on('pick', (action) => tictactoe.onPick(action));\r\n\r\ncup.submit();"],"names":[],"sourceRoot":""}