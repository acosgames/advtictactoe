(()=>{"use strict";const e=new class{constructor(){try{this.actions=JSON.parse(JSON.stringify(globals.actions()))}catch(e){return void this.error("Failed to load actions")}try{this.originalGame=JSON.parse(JSON.stringify(globals.game()))}catch(e){return void this.error("Failed to load originalGame")}try{this.nextGame=JSON.parse(JSON.stringify(globals.game()))}catch(e){return void this.error("Failed to load nextGame")}this.currentAction=null,this.isNewGame=!1,this.defaultSeconds=15,this.kickedPlayers=[],this.nextGame&&0!=Object.keys(this.nextGame.rules).length||(this.isNewGame=!0,this.error("Missing Rules")),this.nextGame&&("timer"in this.nextGame||(this.nextGame.timer={}),"state"in this.nextGame||(this.nextGame.state={}),"players"in this.nextGame||(this.nextGame.players={}),this.nextGame.prev={},"next"in this.nextGame||(this.nextGame.next={}),"rules"in this.nextGame||(this.nextGame.rules={}),this.nextGame.events={})}on(e,t){if("newgame"!=e)for(var i=0;i<this.actions.length;i++)this.actions[i].type==e&&(this.currentAction=this.actions[i],t(this.currentAction));else this.isNewGame&&(this.currentAction=this.actions[0],t(this.actions[0]),this.isNewGame=!1)}setGame(e){for(var t in this.nextGame.players){let i=this.nextGame.players[t];e.players[t]={name:i.name}}this.nextGame=e}submit(){this.kickedPlayers.length>0&&(this.nextGame.kick=this.kickedPlayers),globals.finish(this.nextGame)}gameover(e){this.event("gameover",e)}log(e){globals.log(e)}error(e){globals.error(e)}kickPlayer(e){this.kickedPlayers.push(e)}database(){return globals.database()}action(){return this.currentAction}state(e,t){return void 0===e?this.nextGame.state:void 0===t?this.nextGame.state[e]:void(this.nextGame.state[e]=t)}playerList(){return Object.keys(this.nextGame.players)}playerCount(){return Object.keys(this.nextGame.players).length}players(e,t){return void 0===e?this.nextGame.players:void 0===t?this.nextGame.players[e]:void(this.nextGame.players[e]=t)}rules(e,t){return void 0===e?this.nextGame.rules:void 0===t?this.nextGame.rules[e]:void(this.nextGame.rules[e]=t)}prev(e){return"object"==typeof e&&(this.nextGame.prev=e),this.nextGame.prev}next(e){return"object"==typeof e&&(this.nextGame.next=e),this.nextGame.next}setTimelimit(e){e=e||this.defaultSeconds,this.nextGame.timer||(this.nextGame.timer={}),this.nextGame.timer.set=Math.min(60,Math.max(10,e))}reachedTimelimit(e){return void 0!==e.timeleft&&e.timeleft<=0}event(e,t){if(!t)return this.nextGame.events[e];this.nextGame.events[e]=t||{}}clearEvents(){this.nextGame.events={}}};let t={state:{cells:{0:"",1:"",2:"",3:"",4:"",5:"",6:"",7:"",8:""}},players:{},rules:{bestOf:5,maxPlayers:2},next:{},events:{}};const i=new class{onNewGame(i){e.setGame(t),this.checkNewRound()}onSkip(t){let i=e.next();i&&i.id&&this.playerLeave(i.id)}onJoin(t){if(e.log(t),!t.user.id)return;let i=e.players(t.user.id);i.rank=2,i.score=0,e.event("join",{id:t.user.id}),this.checkNewRound()}checkNewRound(){let t=e.rules("maxPlayers")||2;e.playerCount()>=t&&this.newRound()}onLeave(e){this.playerLeave(e.user.id)}playerLeave(t){let i=e.players(),s=null;if(i[t]&&(s=this.selectNextPlayer(t)),s){let e=i[s];this.setWinner(e.type,"forfeit")}}onPick(t){let i=e.state(),s=e.players(t.user.id);s.test2&&delete s.test2;let r=t.payload.cell;if(i.cells[r].length>0)return void e.next({id:t.user.id,action:"pick",error:"NOT_EMPTY"});let n=s.type,a=t.user.id;i.cells[r]=n,e.event("picked",{cellid:r,id:a}),this.checkWinner()||(e.setTimelimit(20),this.selectNextPlayer(null))}newRound(){let t=e.playerList(),i=e.state();i.startPlayer&&0!=i.startPlayer.length?i.startPlayer=this.selectNextPlayer(i.startPlayer):i.startPlayer=this.selectNextPlayer(t[Math.floor(Math.random()*t.length)]);let s=e.players();for(var r in s)s[r].type="O";s[i.startPlayer].type="X",e.event("gamestart",1)}selectNextPlayer(t){let i=e.action(),s=e.playerList();t=t||i.user.id;let r=s.filter((e=>e!=t));return e.next({id:r[0],action:"pick"}),r[0]}checkWinner(){return!!(this.check([0,1,2])||this.check([3,4,5])||this.check([6,7,8])||this.check([0,3,6])||this.check([1,4,7])||this.check([2,5,8])||this.check([0,4,8])||this.check([6,4,2])||this.checkNoneEmpty())}checkNoneEmpty(){let t=e.state().cells,i=[];for(var s in t)i.push(t[s]);let r=i.filter((e=>""==e));return 0==r.length&&this.setTie(),0==r.length}check(t){let i=e.state().cells,s=[];for(var r in i)s.push(i[r]);let n=s[t[0]];if(""==n)return!1;let a=t.filter((e=>s[e]==n));return 3==a.length&&a.length==t.length&&(this.setWinner(n,t),!0)}findPlayerWithType(t){let i=e.players();for(var s in i)if(i[s].type==t)return s;return null}setTie(){e.gameover({type:"tie"}),e.next({})}setWinner(t,i){let s=this.findPlayerWithType(t),r=e.players(s);r.rank=1,r.score=r.score+100,r||(r.id="unknown player"),e.gameover({type:"winner",pick:t,strip:i,id:s}),e.next({})}};e.on("newgame",(e=>i.onNewGame(e))),e.on("skip",(e=>i.onSkip(e))),e.on("join",(e=>i.onJoin(e))),e.on("leave",(e=>i.onLeave(e))),e.on("pick",(e=>i.onPick(e))),e.submit()})();