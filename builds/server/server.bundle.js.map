{"version":3,"sources":["file:///G:\\GitHub\\fsg-platform\\templates\\tictactoe\\game-server\\fsg.js","file:///G:\\GitHub\\fsg-platform\\templates\\tictactoe\\game-server\\game.js","file:///webpack/bootstrap","file:///webpack/runtime/define property getters","file:///webpack/runtime/hasOwnProperty shorthand","file:///G:\\GitHub\\fsg-platform\\templates\\tictactoe\\game-server\\index.js"],"names":[],"mappings":";;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;AAIA;;AAEA;AACA;AACA;AACA;;AAEA,mDAAmD,gBAAgB,iCAAiC;AACpG;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gCAAgC;AAChC;AACA,yCAAyC;AACzC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,SAAS,E;;;;;;;;;;;;;;ACvKA;;AAExB;AACA;AACA;AACA;AACA,KAAK;AACL,eAAe;AACf;AACA;AACA;AACA,KAAK;AACL,YAAY;AACZ;AACA;;AAEA;;AAEA;AACA,QAAQ,iDAAW;AACnB;AACA;;AAEA;AACA,qBAAqB,gDAAU;AAC/B,mBAAmB,8CAAQ;AAC3B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,qBAAqB,gDAAU;AAC/B;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,yBAAyB,+CAAS;AAClC,0BAA0B,qDAAe;AACzC;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,gDAAU;AAC/B;AACA;;AAEA;AACA,sBAAsB,iDAAW;AACjC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,+CAAS;AAC7B,qBAAqB,gDAAU;AAC/B,mBAAmB,iDAAW;;AAE9B;AACA;AACA;;AAEA;AACA;AACA,YAAY,8CAAQ;AACpB;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;;AAEA,QAAQ,+CAAS;AACjB,QAAQ,8CAAQ;AAChB;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;;AAEA;AACA,yBAAyB,oDAAc;;AAEvC,oBAAoB,+CAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAsB,iDAAW;AACjC;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,gDAAU;AAC/B,sBAAsB,oDAAc;AACpC;AACA;AACA;AACA,QAAQ,8CAAQ;AAChB;AACA;AACA,SAAS;AACT;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,+CAAS;AAC7B;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,+CAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAsB,iDAAW;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA,QAAQ,qDAAe;AACvB,QAAQ,+CAAS;AACjB,QAAQ,8CAAQ,GAAG;AACnB,QAAQ,8CAAQ,GAAG;;AAEnB,QAAQ,kDAAY;AACpB;AACA;AACA;AACA;AACA;AACA,qBAAqB,iDAAW;AAChC;AACA;AACA;AACA,QAAQ,qDAAe;AACvB,QAAQ,+CAAS;AACjB,QAAQ,8CAAQ;AAChB;AACA;AACA;AACA,SAAS;AACT,QAAQ,8CAAQ,GAAG;;AAEnB,QAAQ,kDAAY;AACpB;AACA;;AAEA,iEAAe,eAAe,E;;;;;;UCjO9B;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,wCAAwC,yCAAyC;WACjF;WACA;WACA,E;;;;;WCPA,wF;;;;;;;;;;;;ACAwB;AACO;;AAE/B,sDAAgB;;AAEhB,4CAAM,kBAAkB,oDAAmB;AAC3C,4CAAM,eAAe,iDAAgB;AACrC,4CAAM,eAAe,iDAAgB;AACrC,4CAAM,gBAAgB,kDAAiB;AACvC,4CAAM,eAAe,iDAAgB;;AAErC,gDAAU,G","file":"server.bundle.js","sourcesContent":["\r\nclass FSG {\r\n    constructor() {\r\n        this.msg = JSON.parse(JSON.stringify(globals.action()));\r\n        this.originalGame = JSON.parse(JSON.stringify(globals.game()));\r\n        this.nextGame = JSON.parse(JSON.stringify(globals.game()));\r\n        this.isNewGame = false;\r\n        this.markedForDelete = false;\r\n        this.nextTimeLimit = 0;\r\n        this.kickedPlayers = [];\r\n\r\n        if (!this.nextGame || Object.keys(this.nextGame.rules).length == 0) {\r\n            this.isNewGame = true;\r\n            this.error('Missing Rules');\r\n        }\r\n\r\n        if (this.nextGame) {\r\n            if (!('state' in this.nextGame)) {\r\n                this.nextGame.state = {};\r\n            }\r\n            if (!('players' in this.nextGame)) {\r\n                this.nextGame.players = {};\r\n            }\r\n\r\n            //if (!('prev' in this.nextGame)) {\r\n            this.nextGame.prev = {};\r\n            //}\r\n\r\n            if (!('next' in this.nextGame)) {\r\n                this.nextGame.next = {};\r\n            }\r\n\r\n            if (!('rules' in this.nextGame)) {\r\n                this.nextGame.rules = {};\r\n            }\r\n\r\n            //if (!('events' in this.nextGame)) {\r\n            this.nextGame.events = [];\r\n            //}\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    on(type, cb) {\r\n        if (this.msg.type != type) {\r\n            if (type == 'newgame' && this.isNewGame) {\r\n                cb(this.msg);\r\n\r\n                // this.nextGame = Object.assign({}, defaultGame, { players: this.nextGame.players })\r\n            }\r\n            return;\r\n        }\r\n\r\n        cb(this.msg);\r\n    }\r\n\r\n    setGame(game) {\r\n        for (var id in this.nextGame.players) {\r\n            let player = this.nextGame.players[id];\r\n            game.players[id] = { name: player.name }\r\n        }\r\n        //game.players = Object.assign({}, game.players, this.nextGame.players)\r\n        this.nextGame = game;\r\n    }\r\n\r\n    submit() {\r\n        if (this.nextGame.next) {\r\n            this.nextGame.next.timelimit = this.nextTimeLimit;\r\n            if (this.markedForDelete)\r\n                delete this.nextGame.next['timelimit'];\r\n        }\r\n\r\n        if (this.kickedPlayers.length > 0)\r\n            this.nextGame.kick = this.kickedPlayers;\r\n\r\n        globals.finish(this.nextGame);\r\n    }\r\n\r\n    killGame() {\r\n        this.markedForDelete = true;\r\n        globals.killGame();\r\n    }\r\n\r\n    log(msg) {\r\n        globals.log(msg);\r\n    }\r\n    error(msg) {\r\n        globals.error(msg);\r\n    }\r\n\r\n    kickPlayer(id) {\r\n        this.kickedPlayers.push(id);\r\n    }\r\n\r\n    action() {\r\n        return this.msg;\r\n    }\r\n\r\n    state(key, value) {\r\n\r\n        if (typeof key === 'undefined')\r\n            return this.nextGame.state;\r\n        if (typeof value === 'undefined')\r\n            return this.nextGame.state[key];\r\n\r\n        this.nextGame.state[key] = value;\r\n    }\r\n\r\n    playerList() {\r\n        return Object.keys(this.nextGame.players);\r\n    }\r\n    playerCount() {\r\n        return Object.keys(this.nextGame.players).length;\r\n    }\r\n\r\n    players(userid, value) {\r\n        if (typeof userid === 'undefined')\r\n            return this.nextGame.players;\r\n        if (typeof value === 'undefined')\r\n            return this.nextGame.players[userid];\r\n\r\n        this.nextGame.players[userid] = value;\r\n    }\r\n\r\n    rules(rule, value) {\r\n        if (typeof rule === 'undefined')\r\n            return this.nextGame.rules;\r\n        if (typeof value === 'undefined')\r\n            return this.nextGame.rules[rule];\r\n\r\n        this.nextGame.rules[rule] = value;\r\n    }\r\n\r\n    prev(obj) {\r\n        if (typeof obj === 'object') {\r\n            this.nextGame.prev = obj;\r\n        }\r\n        return this.nextGame.prev;\r\n    }\r\n\r\n    next(obj) {\r\n        if (typeof obj === 'object') {\r\n            this.nextGame.next = obj;\r\n        }\r\n        return this.nextGame.next;\r\n    }\r\n\r\n    setTimeLimit(seconds) {\r\n        this.nextTimeLimit = Math.min(60, Math.max(10, seconds));\r\n    }\r\n\r\n    event(name) {\r\n        this.nextGame.events.push(name);\r\n    }\r\n\r\n    clearEvents() {\r\n        this.nextGame.events = [];\r\n    }\r\n    events(name) {\r\n        if (typeof name === 'undefined')\r\n            return this.nextGame.events;\r\n        this.nextGame.events.push(name);\r\n    }\r\n}\r\n\r\nexport default new FSG();","import fsg from './fsg';\r\n\r\nlet defaultGame = {\r\n    state: {\r\n        cells: ['', '', '', '', '', '', '', '', ''],\r\n        startPlayer: ''\r\n    },\r\n    players: {},\r\n    rules: {\r\n        bestOf: 5,\r\n        maxPlayers: 2\r\n    },\r\n    next: {},\r\n    events: []\r\n}\r\n\r\nclass Tictactoe {\r\n\r\n    onNewGame() {\r\n        fsg.setGame(defaultGame);\r\n        this.checkNewRound();\r\n    }\r\n\r\n    onSkip() {\r\n        let action = fsg.action();\r\n        let next = fsg.next();\r\n        let id = action.payload.id;\r\n        if (!id) {\r\n            id = next.id;\r\n        }\r\n\r\n        this.playerLeave(id);\r\n    }\r\n\r\n    onJoin() {\r\n        let action = fsg.action();\r\n        if (!action.user.id)\r\n            return;\r\n\r\n        // if (fsg.players(action.user.id).type)\r\n        //     return;\r\n\r\n        this.checkNewRound();\r\n    }\r\n\r\n    checkNewRound() {\r\n        //if player count reached required limit, start the game\r\n        let maxPlayers = fsg.rules('maxPlayers') || 2;\r\n        let playerCount = fsg.playerCount();\r\n        if (playerCount >= maxPlayers) {\r\n            this.newRound();\r\n        }\r\n    }\r\n\r\n    onLeave() {\r\n        let action = fsg.action();\r\n        this.playerLeave(action.user.id);\r\n    }\r\n\r\n    playerLeave(id) {\r\n        let players = fsg.players();\r\n        let otherPlayerId = null;\r\n        if (players[id]) {\r\n            otherPlayerId = this.selectNextPlayer(id);\r\n            delete players[id];\r\n        }\r\n\r\n        if (otherPlayerId) {\r\n            let otherPlayer = players[otherPlayerId];\r\n            this.setWinner(otherPlayer.type, 'forfeit')\r\n        }\r\n    }\r\n\r\n    onPick() {\r\n        let state = fsg.state();\r\n        let action = fsg.action();\r\n        let user = fsg.players(action.user.id);\r\n\r\n        //get the picked cell\r\n        let cellid = action.payload.cell;\r\n        let cell = state.cells[cellid];\r\n\r\n        // block picking cells with markings, and send error\r\n        if (cell.length > 0) {\r\n            fsg.next({\r\n                id: action.user.id,\r\n                action: 'pick',\r\n                error: 'NOT_EMPTY'\r\n            })\r\n            return;\r\n        }\r\n\r\n        //mark the selected cell\r\n        let type = user.type;\r\n        let id = action.user.id;\r\n        state.cells[cellid] = type;\r\n\r\n        fsg.event('picked');\r\n        fsg.prev({\r\n            cellid, id\r\n        })\r\n\r\n        if (this.checkWinner()) {\r\n            return;\r\n        }\r\n\r\n        this.selectNextPlayer();\r\n    }\r\n\r\n    newRound() {\r\n        let playerList = fsg.playerList();\r\n\r\n        let state = fsg.state();\r\n        //select the starting player\r\n        if (!state.startPlayer || state.startPlayer.length == 0) {\r\n            state.startPlayer = this.selectNextPlayer(playerList[Math.floor(Math.random() * playerList.length)]);\r\n        }\r\n        else {\r\n            state.startPlayer = this.selectNextPlayer(state.startPlayer);\r\n        }\r\n\r\n        //set the starting player, and set type for other player\r\n        let players = fsg.players();\r\n        for (var id in players)\r\n            players[id].type = 'O';\r\n        players[state.startPlayer].type = 'X';\r\n    }\r\n\r\n    selectNextPlayer(userid) {\r\n        let action = fsg.action();\r\n        let players = fsg.playerList();\r\n        userid = userid || action.user.id;\r\n        //only 2 players so just filter the current player\r\n        let remaining = players.filter(x => x != userid);\r\n        fsg.next({\r\n            id: remaining[0],\r\n            action: 'pick'\r\n        });\r\n        return remaining[0];\r\n    }\r\n\r\n\r\n    // Check each strip that makes a win\r\n    //      0  |  1  |  2\r\n    //    -----------------\r\n    //      3  |  4  |  5\r\n    //    -----------------\r\n    //      6  |  7  |  8\r\n    checkWinner() {\r\n        if (this.check([0, 1, 2])) return true;\r\n        if (this.check([3, 4, 5])) return true;\r\n        if (this.check([6, 7, 8])) return true;\r\n        if (this.check([0, 3, 6])) return true;\r\n        if (this.check([1, 4, 7])) return true;\r\n        if (this.check([2, 5, 8])) return true;\r\n        if (this.check([0, 4, 8])) return true;\r\n        if (this.check([6, 4, 2])) return true;\r\n        if (this.checkNoneEmpty()) return true;\r\n        return false;\r\n    }\r\n\r\n    checkNoneEmpty() {\r\n        let cells = fsg.state().cells;\r\n        let filtered = cells.filter(v => v == '');\r\n\r\n        if (filtered.length == 0) {\r\n            this.setTie();\r\n        }\r\n        return filtered.length == 0;\r\n    }\r\n\r\n    // checks if a strip has matching types\r\n    check(strip) {\r\n        let cells = fsg.state().cells;\r\n        let first = cells[strip[0]];\r\n        if (first == '')\r\n            return false;\r\n        let filtered = strip.filter(id => cells[id] == first);\r\n        if (filtered.length == 3 && filtered.length == strip.length) {\r\n            this.setWinner(first, strip);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    findPlayerWithType(type) {\r\n        let players = fsg.players();\r\n        for (var id in players) {\r\n            let player = players[id];\r\n            if (player.type == type)\r\n                return id;\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n    setTie() {\r\n        fsg.clearEvents();\r\n        fsg.event('tie')\r\n        fsg.next({});\r\n        fsg.prev({})\r\n\r\n        fsg.killGame();\r\n    }\r\n    // set the winner event and data\r\n    setWinner(type, strip) {\r\n        //find user who matches the win type\r\n        let userid = this.findPlayerWithType(type);\r\n        let player = fsg.players(userid);\r\n        if (!player) {\r\n            player.id = 'unknown player';\r\n        }\r\n        fsg.clearEvents();\r\n        fsg.event('winner')\r\n        fsg.prev({\r\n            pick: type,\r\n            strip: strip,\r\n            id: userid\r\n        })\r\n        fsg.next({});\r\n\r\n        fsg.killGame();\r\n    }\r\n}\r\n\r\nexport default new Tictactoe();","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import fsg from './fsg';\r\nimport tictactoe from './game';\r\n\r\nfsg.setTimeLimit(20);\r\n\r\nfsg.on('newgame', () => tictactoe.onNewGame());\r\nfsg.on('skip', () => tictactoe.onSkip());\r\nfsg.on('join', () => tictactoe.onJoin());\r\nfsg.on('leave', () => tictactoe.onLeave());\r\nfsg.on('pick', () => tictactoe.onPick());\r\n\r\nfsg.submit();"],"sourceRoot":""}